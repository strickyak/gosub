#!/bin/bash -eu
#
# "gu": run "g"osub on "u"nix.
#
# Usage:
#   alias gu=./gu
#   gu test test/t1.go
#   gu build demo/wc.go
#   gu run demo/wc.go < Makefile
set -eu

function cc() {
  gcc -pedantic -Wall -Wno-unused-label -Werror -g -I. "$@"
}

function compile() {
  T=$(basename $1 .go).bin
  (
    rm -f ___.*
    go run gosub.go < $1 > ___.defs.h 2>___.err || { E=$? ; cat ___.err ; exit $E ; }
    clang-format -i --style=Google ___.*.c || true
    (
      echo '#include "___.defs.h"'
      echo 'void initvars() {'
      echo '}'
    ) > ___.initvars.c

    for x in ___.*.c
    do
      cc -c $x
    done
    for x in runtime/*.c
    do
      cc -c -o ___.runtime.$(basename $x .c).o $x
    done
    ar qcs ___.a ___.*.o
    cc -o $T runtime/runt.c runtime/bigmem.c  ___.a
    ls -l $T

    (
      echo '#include "___.defs.h"'
      for x in $(nm $T  | awk '/__initvar_[1-9][0-9]*$/ {print $NF}')
      do
        echo "extern void $x();"
      done
      echo 'void initvars() {'
      for x in $(nm $T  | awk '/__initvar_[1-9][0-9]*$/ {print $NF}')
      do
        echo "$x();"
      done
      echo '}'
    ) > ___.initvars.c

    cc -c ___.initvars.c
    ar rvcs ___.a ___.initvars.o
    cc -o $T runtime/runt.c runtime/bigmem.c  ___.a
    ls -l $T
  ) >&2
  echo $T
}

case $2 in
  *.go ) : good ;;
  * )
    echo "Usage:  $0 build filename.go" >&2
    echo "Usage:  $0 test filename.go" >&2
    echo "Usage:  $0 run filename.go args..." >&2
    exit 13
esac

case $1 in
  build )
    compile $2
    ;;
  run )
    compile $2
    BIN=$(basename $2 .go).bin
    shift
    shift
    $(dirname $BIN)/$(basename $BIN) "$@"
    ;;
  test )
    compile $2

    ./$(basename $2 .go).bin > $2.got
    grep '^// expect:' <$2 | sed 's;// expect:;;' > $2.want
    if diff -w $2.want $2.got
    then
      echo Good: $2 >&2
    else
      echo DIFFERENT: $2 >&2
      exit 1
    fi
    ;;
  * )
    echo "Usage:  $0 build filename.go" >&2
    echo "Usage:  $0 test filename.go" >&2
    echo "Usage:  $0 run filename.go args..." >&2
    exit 13
    ;;
esac
