#!/bin/bash
#
# "g9": run "g"osub on os"9".
#
set -eu

# 32014  [2022-02-05 17:36:41 -0800] /opt/yak/cmoc/bin/cmoc -o t9 --os9 -i -I.  --lwlink=/opt/yak/bin-os9/lwlink  runtime/runt.c runtime/os9_base.c   ___.func.builtin__len.o ___.func.builtin__make.o ___.func.builtin__panic.o ___.func.builtin__println.o ___.func.io__init__mod__109.o ___.func.io__init__mod__110.o ___.func.main__main.o ___.func.unix__Close.o ___.func.unix__Creat.o ___.func.unix__Exit.o ___.func.unix__O_RDONLY.o ___.func.unix__O_RDWR.o ___.func.unix__O_WRONLY.o ___.func.unix__Open.o ___.func.unix__Read.o ___.func.unix__Write.o ___.initmod.builtin.o ___.initmod.io.o ___.initmod.main.o ___.initmod.unix.o ___.initmods.o ___.initvars.o ___.var.io__EOF.o ___.var.io__alreadyCalledInit.o  ../pythonine/v0.1/octet.o 


# This is kind of what we need at the end:
#
# /opt/yak/cmoc/bin/cmoc -o wc -I. --os9 -i --lwlink=/opt/yak/bin-os9/lwlink ___.func.builtin__len.o ___.func.builtin__make.o ___.func.builtin__panic.o ___.func.builtin__println.o ___.func.errors__New.o ___.func.io__init__mod__109.o ___.func.io__init__mod__110.o ___.func.log__Fatalf.o ___.func.main__Count.o ___.func.main__main.o ___.func.os__init__mod__142.o ___.func.unix__Close.o ___.func.unix__Creat.o ___.func.unix__Exit.o ___.func.unix__O_RDONLY.o ___.func.unix__O_RDWR.o ___.func.unix__O_WRONLY.o ___.func.unix__Open.o ___.func.unix__Read.o ___.func.unix__Write.o ___.func.unsafe__AddrOfFirstElement.o ___.func.unsafe__AddressOf.o ___.func.unsafe__Peek.o ___.func.unsafe__Peek2.o ___.func.unsafe__Poke.o ___.func.unsafe__Poke2.o ___.func.unsafe__RestoreFinalChar.o ___.func.unsafe__SetHighBitOfFinalChar.o ___.func.unsafe__TypeCodeOf.o ___.initmod.builtin.o ___.initmod.errors.o ___.initmod.io.o ___.initmod.log.o ___.initmod.main.o ___.initmod.os.o ___.initmod.unix.o ___.initmod.unsafe.o ___.initmods.o ___.initvars.o ___.meth.errors__Error__Error.o ___.meth.errors__Error__String.o ___.meth.os__File__Read.o ___.meth.os__File__Write.o ___.var.io__EOF.o ___.var.io__alreadyCalledInit.o ___.var.main__Bytes.o ___.var.main__Lines.o ___.var.main__Words.o ___.var.main__wasWhite.o ___.var.os__Stderr.o ___.var.os__Stdin.o ___.var.os__Stdout.o    ../pythonine/v0.1/octet.c  $(ls runtime/*.c | grep -v /unix )
#



function cc() {
  NAME=$1
  shift
  echo "compiler number $NAME"
  (
    set -x
    /opt/yak/cmoc/bin/cmoc --check-null --stack-space=200 --os9 -i -I'.' -I'runtime/' -I'../pythonine/v0.1/' "$@"
  )
}

function ExtractInitVarsFromMapFile() {
        awk '/^Symbol: _.*__initvar_[1-9][0-9]* / {print $2}' "$1" |
        sed -e 's/^_//'
}

function compile() {
  T=$(basename $1 .go)
  (
    rm -f ___.*

    RUNTIMES=$( ls runtime/*.c | grep -v /runt.c | grep -v /unix_)

    go run gosub.go < $1 > ___.defs.h 2>___.err || { E=$? ; cat ___.err ; exit $E ; }
    clang-format -i --style=Google ___.*.c || true

    # TRY with ___.runtime.*.c
    for cf in $RUNTIMES ../pythonine/v0.1/octet.c 
    do
      cp $cf ___.runtime.$(basename $cf)
    done

    for x in ___.*.c
    do
      cc One:$x -c $x
    done
    #for x in $RUNTIMES
    #do
    #  cc Two:$x -c -o ___.runtime.$(basename $x .c).o $x
    #done
    rm -f ___.a
    ( set -x ; lwar -c -r ___.a ___.*.o )

    (
      echo '#include "___.defs.h"'
      echo 'void initvars() {'
      echo '}'
    ) > ___.initvars.c

    # cc Three:$T -o $T runtime/runt.c ../pythonine/v0.1/octet.c ___.a
    cc Three:$T -o $T runtime/runt.c ___.initvars.c  ___.a
    mv $T $T.bin
    ls -l $T.bin

    for ROUND in A B C
    do 
      INITVARS=$(ExtractInitVarsFromMapFile $T.map | LC_ALL=C sort)
      for x in $INITVARS ; do echo $x ; done > ,$T.$ROUND.round
      (
        echo '#include "___.defs.h"'
        for x in $INITVARS
        do
          echo "extern void $x();"
        done
        echo 'void initvars() {'
        for x in $INITVARS
        do
          echo "$x();"
        done
        echo '}'
      ) > ___.initvars.c
      ( set -x ; cat -n  ,$T.$ROUND.round )
      ( set -x ; cat -n  ___.initvars.c )

      # cc Four:$ROUND -c ___.initvars.c
      # ( set -x ; lwar -r ___.a ___.initvars.o )
      cc Five:$ROUND -o $T runtime/runt.c ___.initvars.c ../pythonine/v0.1/octet.c ___.a
      mv -v $T $T.bin
      ls -l $T.bin
      ( set -x ; : map ; cat -n $T.map )
      # USED=$(sed -e 's/.*[(]\(___.*\)[)].*/\1/' $T.map | LC_ALL=C sort -u)

      USED=$(tr '()' '||' < $T.map | awk -F'|' '$2 ~ /^___[.].*o$/ { gsub(/o$/, "c", $2) ; print $2 }' | LC_ALL=C sort -u)

      ls -l $USED

      true || (
        # HIT and MISS don't seem to be used for anything.
        sed -e 's/.*[(]\(.*\)[)].*/\1/' $T.map | grep -v '<synthetic>' | LC_ALL=C sort -u | cat -n
        HIT=
        MISS=
        set +x
        for x in $( sed -e 's/.*[(]\(.*\)[)].*/\1/' $T.map | grep -v '<synthetic>' | LC_ALL=C sort -u )
        do
          C=$(basename $x .o).c
          if test -s $C
          then
            HIT="$HIT $C"
            wc $C
          else
            MISS="$MISS $x"
          fi
        done
        echo
        echo HIT: $HIT
        echo
        echo MISS: $MISS
        echo
      )

    done # ROUND
    ls -l $USED

    wc ../doing_os9/gomar/cmocly/cmocly.go
    # go install ../doing_os9/gomar/cmocly/cmocly.go
    ( cd ../doing_os9/gomar/cmocly/ && go install cmocly.go )

    ##? cp ../pythonine/v0.1/octet.[ch] .
    ##? cp ../pythonine/v0.1/standard.[ch] .
    #### for cf in runtime/runt.c $RUNTIMES ../pythonine/v0.1/octet.c 
    #### do
    ####   cp $cf ___.runtime.$(basename $cf)
    #### done

    cp runtime/runt.c ___.main.c
    $HOME/go/bin/cmocly  -cmoc /opt/yak/cmoc/bin/cmoc -cmoc_pre='--check-null --stack-space=200 -I. -I./runtime -I../pythonine/v0.1/ '  -o $T ___.main.c $USED  

    # ___.initvars.c ___.initmods.c ___.func.main__main.c  ___.initmod.*.c  ___.*__init__mod__*.c   # too much

  ) >&2
  echo $T.bin
  mv $T $T.bin
  ls -l $T.bin
}

case $2 in
  *.go ) : good ;;
  * )
    echo "Usage:  $0 build filename.go" >&2
    echo "Usage:  $0 test filename.go" >&2
    echo "Usage:  $0 run filename.go args..." >&2
    exit 13
esac

case $1 in
  build )
    compile $2
    ;;
  run )
    compile $2
    sh ../doing_os9/gomar/launch.sh "$(basename $2 .go).bin"

#<>#    BASE=$(basename $2 .go)
#<>#    DISK=/tmp/emu.dsk
#<>#    HARD=/tmp/sdc.vhd
#<>#    G=../doing_os9/gomar
#<>#    SRC_DISK=/home/strick/6809/hg.code.sf.net/nitros9/level2/coco3/nos96809l2v030300coco3_80d.dsk
#<>#    SRC_HARD=$G/eouBeta610/68SDC.VHD
#<>#
#<>#    cp -fv $G/drive/boot2coco3.orig /tmp/boot2coco3
#<>#    cp -fv $SRC_DISK $DISK
#<>#    cp -fv $SRC_HARD $HARD
#<>#    os9 copy -r $BASE.bin $DISK,cmds/$BASE
#<>#    os9 attr -e -r -w -pe -pr $DISK,cmds/$BASE
#<>#    echo "$BASE #128" | os9 copy -r -l /dev/stdin $DISK,startup
#<>#    # echo "$BASE #128" | os9 copy -r -l /dev/null $DISK,startup
#<>#    ( cd $G && go run -x --tags=level2,coco3,trace gomar.go \
#<>#      --boot /tmp/boot2coco3 --disk $DISK --h0 $HARD \
#<>#      --trigger_os9="(?i:fork.*file=.$BASE)" 2>/tmp/_ )
    ;;
  test )
    echo Sorry, test not supported. >&2
    exit 13
    ;;
  * )
    echo "Usage:  $0 build filename.go" >&2
    echo "Usage:  $0 test filename.go" >&2
    echo "Usage:  $0 run filename.go args..." >&2
    exit 13
    ;;
esac
